format = """
$username\
$hostname\
$kubernetes\
$directory\
${custom.git_host}\
${custom.git_branch}\
$git_commit\
$git_state\
$git_status\
$hg_branch\
$docker_context\
$package\
$env_var\
$line_break\
$jobs\
$character"""

right_format = """
$cmake\
$crystal\
$dart\
$deno\
$dotnet\
$elixir\
$elm\
$erlang\
$golang\
$helm\
$java\
$julia\
$kotlin\
$lua\
$nim\
$nodejs\
$ocaml\
$perl\
$php\
$purescript\
$python\
$red\
$ruby\
$rust\
$swift\
$terraform\
$vlang\
$vagrant\
$zig\
$nix_shell\
$conda\
$aws\
$gcloud\
$openstack\
$cmd_duration\
$time
"""
"$schema" = 'https://starship.rs/config-schema.json'
add_newline = false
command_timeout = 3_000 # 3s timeout for commands, git takes a bit

[character]
success_symbol = "[‚ùØ](bright-green)"
error_symbol = "[‚ùØ](bright-red)"

[cmd_duration]
format = '\[[‚è± $duration]($style)\]'
show_notifications = false
min_time_to_notify = 2_000

[directory]
read_only = " ÔÄ£"
truncation_length = 5
truncation_symbol = "./"

[custom.git_host]
command = """
URL=$(command git ls-remote --get-url 2> /dev/null)
if [[ "$URL" =~ "github" ]]; then
    ICON="ÔÇõ "
elif [[ "$URL" =~ "gitlab" ]]; then
    ICON="Ôäñ "
elif [[ "$URL" =~ "git" ]];then
    ICON="ÓúÇ "
else
    ICON="Ôáí "
    URL="localhost"
fi
for PATTERN in "https" "http" "git" "://" "@" "github" "gitlab" ".com" ":"; do
    [[ "$URL" == "$PATTERN"* ]] && URL="${URL##$PATTERN}"
done
for PATTERN in "/" ".git"; do
    [[ "$URL" == *"$PATTERN" ]] && URL="${URL%%$PATTERN}"
done
printf "%s%s" "$ICON" "$URL"
"""
directories = [".git"]
when = 'git rev-parse --is-inside-work-tree 2> /dev/null'
shell = ["bash","--norc","--noprofile"]
style = "bright-yellow bold"
format = " [$output]($style)"
[custom.git_branch]
command = """
BRANCH="$(command git branch --show-current 2> /dev/null)"
if [[ -z "$BRANCH" ]]; then 
	BRANCH=$(command git status | head -1 | sed 's/HEAD //')
else
	BRANCH="Óú• $BRANCH"
fi 
printf "%s" "$BRANCH"
"""
directories = [".git"]
when = 'git rev-parse --is-inside-work-tree 2> /dev/null'
shell = ["bash","--norc","--noprofile"]
style = "bold purple"
symbol = "Óú• "
format = "|[$output]($style)"
[git_branch]
format = '|[$symbol$branch]($style) '
symbol = 'Óú• '
disabled = true
[git_commit]
disabled = true
commit_hash_length = 7
[git_state]
format = '\([$state( $progress_current/$progress_total)]($style)\)'
[git_status]
format = '(|[$all_status$ahead_behind]($style)) '
conflicted = '\[Ô†π [$count](bright-white bold)\]'
ahead = '\[[ÔØÅ ](bright-blue)[$count](bright-white bold)\]'
behind = '\[[ÔÆæ ](white)[$count](bright-white bold)\]'
diverged = '\[[Óú® ](purple)|[ ÔØÅ ](bright-blue)[$ahead_count](bright-white bold)[ ÔÆæ ](white)[$behind_count](bright-white)\]'
untracked = '\[Ôäú [$count](bright-white bold)\]'
stashed = '\[[Ô£ñ](yellow) [$count](bright-white bold)\]'
modified = '\[[Ôî¶ ](bright-yellow)[$count](bright-white bold)\]'
staged = '\[[Ôëó ](bright-green)[$count](bright-white bold)\]'
renamed = '\[[Ôëö ](bright-cyan) [$count](bright-white bold)\]'
deleted = '\[ÔÄî [$count](bright-white bold)\]'

[time]
format = "[ Ôê∫ $time]($style)"
disabled = false

[username]
format = "[$user]($style)"
[hostname]
format = '@[$hostname]($style) '

[aws]
format = '\[[$symbol($profile)(\($region\))(\[$duration\])]($style)\]'
# symbol = 'aws '
[bun]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'bun '
[c]
format = '\[[$symbol($version(-$name))]($style)\]'
# symbol = 'c '
[cmake]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'cmake '
[cobol]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'cobol '
[conda]
format = '\[[$symbol$environment]($style)\]'
# symbol = 'conda '
[crystal]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'cr '
[daml]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'daml '
[dart]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'dart '
[deno]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'deno '
[docker_context]
format = '\[[$symbol$context]($style)\]'
# symbol = 'docker '
[dotnet]
format = '\[[$symbol($version)(üéØ $tfm)]($style)\]'
# symbol = '.NET '
[elixir]
format = '\[[$symbol($version \(OTP $otp_version\))]($style)\]'
# symbol = 'exs '
[elm]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'elm '
[erlang]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'erl '
[gcloud]
format = '\[[$symbol$account(@$domain)(\($region\))]($style)\]'
[golang]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'go '
[guix_shell]
format = '\[[$symbol]($style)\]'
# symbol = 'guix '
[haskell]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'hask '
[haxe]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'haxe '
[helm]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'helm '
[hg_branch]
format = '\[[$symbol$branch]($style)\]'
[java]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'java '
[julia]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'jul '
[kotlin]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'kotl '
[kubernetes]
format = '\[[$symbol$context( \($namespace\))]($style)\]'
# symbol = 'kube '
[lua]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'lua '
[memory_usage]
format = '\[$symbol[$ram( | $swap)]($style)\]'
# symbol = 'mem '
[meson]
format = '\[[$symbol$project]($style)\]'
# symbol = 'meson '
[nim]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'nim '
[nix_shell]
format = '\[[$symbol$state( \($name\))]($style)\]'
# symbol = 'nix '
[nodejs]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'nodejs '
[ocaml]
format = '\[[$symbol($version)(\($switch_indicator$switch_name\))]($style)\]'
# symbol = 'ml '
[opa]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'ops '
[openstack]
format = '\[[$symbol$cloud(\($project\))]($style)\]'
[os]
format = '\[[$symbol]($style)\]'
[package]
format = '\[[$symbol$version]($style)\]'
# symbol = 'pkg '
[perl]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'perl '
[php]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'php '
[pulumi]
format = '\[[$symbol$stack]($style)\]'
# symbol = 'pulumi '
[purescript]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'purs '
[python]
format = '\[[${symbol}${pyenv_prefix}(${version})(\($virtualenv\))]($style)\]'
# symbol = 'py '
[raku]
format = '\[[$symbol($version-$vm_version)]($style)\]'
# symbol = 'raku '
[red]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'red '
[ruby]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'ruby '
[rust]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'rust '
[scala]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'scala '
[spack]
format = '\[[$symbol$environment]($style)\]'
# symbol = 'spack '
[swift]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'swift '
[terraform]
format = '\[[$symbol$version]($style)\]'
# symbol = 'tf '
[vagrant]
format = '\[[$symbol($version)]($style)\]'
[vlang]
format = '\[[$symbol($version)]($style)\]'
[zig]
format = '\[[$symbol($version)]($style)\]'
# symbol = 'zig '



